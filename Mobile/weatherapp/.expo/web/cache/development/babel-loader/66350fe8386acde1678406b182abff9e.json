{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport var CityService = function () {\n  function CityService() {\n    _classCallCheck(this, CityService);\n\n    this.url = \"https://eb37aa91d52e.ngrok.io/api/city\";\n  }\n\n  _createClass(CityService, [{\n    key: \"getAllCities\",\n    value: function getAllCities() {\n      var request;\n      return _regeneratorRuntime.async(function getAllCities$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetch(this.url));\n\n            case 2:\n              request = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(request.json());\n\n            case 5:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getCityById\",\n    value: function getCityById(id) {\n      var request;\n      return _regeneratorRuntime.async(function getCityById$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(fetch(this.url + \"/\" + id));\n\n            case 2:\n              request = _context2.sent;\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(request.json());\n\n            case 5:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getClientCity\",\n    value: function getClientCity() {\n      var request;\n      return _regeneratorRuntime.async(function getClientCity$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(fetch(this.url + \"/client\"));\n\n            case 2:\n              request = _context3.sent;\n              _context3.next = 5;\n              return _regeneratorRuntime.awrap(request.text());\n\n            case 5:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getCitiesByIds\",\n    value: function getCitiesByIds(ids) {\n      var request;\n      return _regeneratorRuntime.async(function getCitiesByIds$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(fetch(this.url + \"/ids/\" + ids));\n\n            case 2:\n              request = _context4.sent;\n              _context4.next = 5;\n              return _regeneratorRuntime.awrap(request.json());\n\n            case 5:\n              return _context4.abrupt(\"return\", _context4.sent);\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return CityService;\n}();","map":{"version":3,"sources":["C:/Users/roomey/Desktop/react-native/weatherapp/services/city.service.js"],"names":["CityService","url","fetch","request","json","id","text","ids"],"mappings":";;;AAAA,WAAaA,WAAb;AAEE,yBAAc;AAAA;;AACZ,SAAKC,GAAL,GAAW,wCAAX;AAED;;AALH;AAAA;AAAA,WAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACwBC,KAAK,CAAC,KAAKD,GAAN,CAD7B;;AAAA;AACQE,cAAAA,OADR;AAAA;AAAA,+CAEeA,OAAO,CAACC,IAAR,EAFf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA,WAYE,qBAAkBC,EAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACwBH,KAAK,CAAC,KAAKD,GAAL,GAAW,GAAX,GAAiBI,EAAlB,CAD7B;;AAAA;AACQF,cAAAA,OADR;AAAA;AAAA,+CAEeA,OAAO,CAACC,IAAR,EAFf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAZF;AAAA;AAAA,WAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACwBF,KAAK,CAAC,KAAKD,GAAL,GAAW,SAAZ,CAD7B;;AAAA;AACQE,cAAAA,OADR;AAAA;AAAA,+CAEeA,OAAO,CAACG,IAAR,EAFf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBF;AAAA;AAAA,WAsBE,wBAAqBC,GAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACwBL,KAAK,CAAC,KAAKD,GAAL,GAAW,OAAX,GAAqBM,GAAtB,CAD7B;;AAAA;AACQJ,cAAAA,OADR;AAAA;AAAA,+CAEeA,OAAO,CAACC,IAAR,EAFf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAtBF;;AAAA;AAAA","sourcesContent":["export class CityService {\n  url;\n  constructor() {\n    this.url = \"https://eb37aa91d52e.ngrok.io/api/city\";\n    //\"https://localhost:5001/api/city\"\n  }\n\n  async getAllCities() {\n    const request = await fetch(this.url);\n    return await request.json();\n  }\n\n  async getCityById(id) {\n    const request = await fetch(this.url + \"/\" + id);\n    return await request.json();\n  }\n\n  async getClientCity() {\n    const request = await fetch(this.url + \"/client\");\n    return await request.text();\n  }\n\n  async getCitiesByIds(ids) {\n    const request = await fetch(this.url + \"/ids/\" + ids);\n    return await request.json();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}