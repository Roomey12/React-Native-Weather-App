{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CheckBox = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _jsxFileName = \"src/basic/Checkbox.js\";\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _Ionicons = require(\"@expo/vector-icons/Ionicons\");\n\nvar _Ionicons2 = _interopRequireDefault(_Ionicons);\n\nvar _nativeBaseShoutemTheme = require(\"native-base-shoutem-theme\");\n\nvar _mapPropsToStyleNames = require(\"../Utils/mapPropsToStyleNames\");\n\nvar _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);\n\nvar _platform = require(\"../theme/variables/platform\");\n\nvar _platform2 = _interopRequireDefault(_platform);\n\nvar _lodash = require(\"lodash\");\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _computeProps = require(\"../Utils/computeProps\");\n\nvar _computeProps2 = _interopRequireDefault(_computeProps);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar CheckBox = function (_Component) {\n  _inherits(CheckBox, _Component);\n\n  function CheckBox() {\n    _classCallCheck(this, CheckBox);\n\n    return _possibleConstructorReturn(this, (CheckBox.__proto__ || Object.getPrototypeOf(CheckBox)).apply(this, arguments));\n  }\n\n  _createClass(CheckBox, [{\n    key: \"getInitialStyle\",\n    value: function getInitialStyle(variables) {\n      return {\n        checkStyle: {\n          borderColor: this.props.color ? this.props.color : variables.checkboxBgColor,\n          backgroundColor: this.props.checked === true ? this.props.color ? this.props.color : variables.checkboxBgColor : \"transparent\"\n        }\n      };\n    }\n  }, {\n    key: \"prepareRootProps\",\n    value: function prepareRootProps(variables) {\n      var defaultProps = {\n        style: this.getInitialStyle(variables).checkStyle\n      };\n      return (0, _computeProps2.default)(this.props, defaultProps);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var variables = this.context.theme ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables : _platform2.default;\n      var platformStyle = variables.platformStyle;\n      var platform = variables.platform;\n      return _react2.default.createElement(_reactNative.TouchableOpacity, _extends({\n        ref: function ref(c) {\n          return _this2._root = c;\n        }\n      }, this.prepareRootProps(variables), {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        }\n      }), _react2.default.createElement(_Ionicons2.default, {\n        style: {\n          color: variables.checkboxTickColor,\n          fontSize: variables.CheckboxFontSize,\n          lineHeight: variables.CheckboxIconSize\n        },\n        name: platform === \"ios\" && platformStyle !== \"material\" ? \"ios-checkmark-outline\" : \"md-checkmark\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        }\n      }));\n    }\n  }]);\n\n  return CheckBox;\n}(_react.Component);\n\nCheckBox.contextTypes = {\n  theme: _react2.default.PropTypes.object\n};\nCheckBox.propTypes = _extends({}, _reactNative.TouchableOpacity.propTypes, {\n  style: _react2.default.PropTypes.object,\n  checked: _react2.default.PropTypes.bool\n});\nvar StyledCheckBox = (0, _nativeBaseShoutemTheme.connectStyle)(\"NativeBase.CheckBox\", {}, _mapPropsToStyleNames2.default)(CheckBox);\nexports.CheckBox = StyledCheckBox;","map":{"version":3,"sources":["../../../src/basic/Checkbox.js"],"names":["CheckBox","contextTypes","theme","variables","checkStyle","borderColor","backgroundColor","defaultProps","style","platformStyle","platform","color","fontSize","lineHeight","checked","StyledCheckBox"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { TouchableOpacity, Platform } from \"react-native\";\nimport IconNB from \"react-native-vector-icons/Ionicons\";\nimport { connectStyle } from \"native-base-shoutem-theme\";\nimport mapPropsToStyleNames from \"../Utils/mapPropsToStyleNames\";\nimport variable from \"../theme/variables/platform\";\nimport _ from \"lodash\";\nimport computeProps from \"../Utils/computeProps\";\n\nclass CheckBox extends Component {\n  static contextTypes = {\n    theme: React.PropTypes.object\n  };\n\n  getInitialStyle(variables) {\n    return {\n      checkStyle: {\n        borderColor: this.props.color\n          ? this.props.color\n          : variables.checkboxBgColor,\n        backgroundColor: this.props.checked === true\n          ? this.props.color ? this.props.color : variables.checkboxBgColor\n          : \"transparent\"\n      }\n    };\n  }\n\n  prepareRootProps(variables) {\n    const defaultProps = {\n      style: this.getInitialStyle(variables).checkStyle\n    };\n\n    return computeProps(this.props, defaultProps);\n  }\n  render() {\n    const variables = this.context.theme\n      ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables\n      : variable;\n    const platformStyle = variables.platformStyle;\n    const platform = variables.platform;\n    return (\n      <TouchableOpacity\n        ref={c => (this._root = c)}\n        {...this.prepareRootProps(variables)}\n      >\n        <IconNB\n          style={{\n            color: variables.checkboxTickColor,\n            fontSize: variables.CheckboxFontSize,\n            lineHeight: variables.CheckboxIconSize\n          }}\n          name={\n            platform === \"ios\" && platformStyle !== \"material\"\n              ? \"ios-checkmark-outline\"\n              : \"md-checkmark\"\n          }\n        />\n      </TouchableOpacity>\n    );\n  }\n}\n\nCheckBox.propTypes = {\n  ...TouchableOpacity.propTypes,\n  style: React.PropTypes.object,\n  checked: React.PropTypes.bool\n};\n\nconst StyledCheckBox = connectStyle(\n  \"NativeBase.CheckBox\",\n  {},\n  mapPropsToStyleNames\n)(CheckBox);\n\nexport { StyledCheckBox as CheckBox };\n"]},"metadata":{},"sourceType":"script"}