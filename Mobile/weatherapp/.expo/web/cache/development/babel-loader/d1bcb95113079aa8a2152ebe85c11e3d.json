{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\roomey\\\\Desktop\\\\react-native\\\\weatherapp\\\\components\\\\city\\\\City.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { CityService } from \"../../services/city.service\";\nimport { WeatherService } from \"../../services/weather.service\";\nimport { Avatar, Button, Card, Title, Paragraph } from \"react-native-paper\";\nimport { useParams } from \"react-router\";\nimport Image from \"react-native-web/dist/index\";\nexport var City = function City() {\n  var _myCity$weather, _myCity$main, _myCity$main2, _myCity$main3, _myCity$main4, _myCity$wind, _myCity$wind2, _myCity$sys, _myCity$sys2, _myCity$clouds, _myCity$main5;\n\n  var _useParams = useParams(),\n      id = _useParams.id;\n\n  var cityService = new CityService();\n  var weatherService = new WeatherService();\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      myCity = _useState2[0],\n      setMyCity = _useState2[1];\n\n  useEffect(function () {\n    if (id) {\n      cityService.getCityById(id).then(function (el) {\n        weatherService.getWeatherByCityName(el.name).then(function (el1) {\n          console.log(el1);\n          setMyCity(el1);\n        });\n      });\n    } else {\n      cityService.getClientCity().then(function (el) {\n        weatherService.getWeatherByCityName(el).then(function (el1) {\n          console.log(el1);\n          setMyCity(el1);\n        });\n      });\n    }\n  }, []);\n  var weather = (_myCity$weather = myCity.weather) == null ? void 0 : _myCity$weather.find(function (x) {\n    return x !== undefined;\n  });\n\n  var icon = function icon(props) {\n    return React.createElement(Image, _extends({}, props, {\n      size: 50,\n      icon: \"http://openweathermap.org/img/wn/\" + (weather == null ? void 0 : weather.icon) + \"@2x.png\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }\n    }));\n  };\n\n  return React.createElement(Card, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, React.createElement(Image, {\n    size: 50,\n    icon: \"http://openweathermap.org/img/wn/\" + (weather == null ? void 0 : weather.icon) + \"@2x.png\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }), React.createElement(Card.Title, {\n    title: myCity.name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }), React.createElement(Card.Content, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, React.createElement(Title, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \"Weather\"), React.createElement(Paragraph, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, \"Main: \", weather == null ? void 0 : weather.main), React.createElement(Paragraph, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, \"Description: \", weather == null ? void 0 : weather.description), React.createElement(Paragraph, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  })), React.createElement(Card.Content, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, React.createElement(Title, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, \"Temperature\"), React.createElement(Paragraph, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, \"Temperature: \", (_myCity$main = myCity.main) == null ? void 0 : _myCity$main.temp, \" \\xB0C\"), React.createElement(Paragraph, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, \"Feels like: \", (_myCity$main2 = myCity.main) == null ? void 0 : _myCity$main2.feels_like, \" \\xB0C\"), React.createElement(Paragraph, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, \"Max Temperature: \", (_myCity$main3 = myCity.main) == null ? void 0 : _myCity$main3.temp_max, \" \\xB0C\"), React.createElement(Paragraph, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, \"Min Temperature: \", (_myCity$main4 = myCity.main) == null ? void 0 : _myCity$main4.temp_min, \" \\xB0C\"), React.createElement(Paragraph, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  })), React.createElement(Card.Content, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, React.createElement(Title, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, \"Wind\"), React.createElement(Paragraph, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, \"Speed: \", (_myCity$wind = myCity.wind) == null ? void 0 : _myCity$wind.speed, \" m/s\"), React.createElement(Paragraph, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, \"Degree: \", (_myCity$wind2 = myCity.wind) == null ? void 0 : _myCity$wind2.deg, \" \\xB0\"), React.createElement(Paragraph, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  })), React.createElement(Card.Content, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, React.createElement(Title, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, \"Miscellaneous\"), React.createElement(Paragraph, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, \"Sunrise:\", \" \", new Date(((_myCity$sys = myCity.sys) == null ? void 0 : _myCity$sys.sunrise) * 1000 || Date.now()).toLocaleTimeString()), React.createElement(Paragraph, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, \"Sunset:\", \" \", new Date(((_myCity$sys2 = myCity.sys) == null ? void 0 : _myCity$sys2.sunset) * 1000 || Date.now()).toLocaleTimeString()), React.createElement(Paragraph, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \"Cloudiness: \", (_myCity$clouds = myCity.clouds) == null ? void 0 : _myCity$clouds.all, \" %\"), React.createElement(Paragraph, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, \"Humidity: \", (_myCity$main5 = myCity.main) == null ? void 0 : _myCity$main5.humidity, \" %\"), React.createElement(Paragraph, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  })));\n};","map":{"version":3,"sources":["C:/Users/roomey/Desktop/react-native/weatherapp/components/city/City.js"],"names":["React","useState","useEffect","CityService","WeatherService","Avatar","Button","Card","Title","Paragraph","useParams","Image","City","id","cityService","weatherService","myCity","setMyCity","getCityById","then","el","getWeatherByCityName","name","el1","console","log","getClientCity","weather","find","x","undefined","icon","props","main","description","temp","feels_like","temp_max","temp_min","wind","speed","deg","Date","sys","sunrise","now","toLocaleTimeString","sunset","clouds","all","humidity"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { View, Text } from \"react-native\";\nimport { CityService } from \"../../services/city.service\";\nimport { WeatherService } from \"../../services/weather.service\";\nimport { Avatar, Button, Card, Title, Paragraph } from \"react-native-paper\";\nimport { useParams } from \"react-router\";\nimport Image from \"react-native-web\";\n\nexport const City = () => {\n  const { id } = useParams();\n\n  const cityService = new CityService();\n  const weatherService = new WeatherService();\n  const [myCity, setMyCity] = useState({});\n\n  useEffect(() => {\n    if (id) {\n      cityService.getCityById(id).then((el) => {\n        weatherService.getWeatherByCityName(el.name).then((el1) => {\n          console.log(el1);\n          setMyCity(el1);\n        });\n      });\n    } else {\n      cityService.getClientCity().then((el) => {\n        weatherService.getWeatherByCityName(el).then((el1) => {\n          console.log(el1);\n          setMyCity(el1);\n        });\n      });\n    }\n  }, []);\n\n  const weather = myCity.weather?.find((x) => x !== undefined);\n\n  const icon = (props) => (\n    <Image\n      {...props}\n      size={50}\n      icon={`http://openweathermap.org/img/wn/${weather?.icon}@2x.png`}\n    />\n  );\n\n  return (\n    <Card>\n      <Image\n        size={50}\n        icon={`http://openweathermap.org/img/wn/${weather?.icon}@2x.png`}\n      ></Image>\n      <Card.Title title={myCity.name} />\n      <Card.Content>\n        <Title>Weather</Title>\n        <Paragraph>Main: {weather?.main}</Paragraph>\n        <Paragraph>Description: {weather?.description}</Paragraph>\n        <Paragraph></Paragraph>\n      </Card.Content>\n      <Card.Content>\n        <Title>Temperature</Title>\n        <Paragraph>Temperature: {myCity.main?.temp} &#176;C</Paragraph>\n        <Paragraph>Feels like: {myCity.main?.feels_like} &#176;C</Paragraph>\n        <Paragraph>Max Temperature: {myCity.main?.temp_max} &#176;C</Paragraph>\n        <Paragraph>Min Temperature: {myCity.main?.temp_min} &#176;C</Paragraph>\n        <Paragraph></Paragraph>\n      </Card.Content>\n      <Card.Content>\n        <Title>Wind</Title>\n        <Paragraph>Speed: {myCity.wind?.speed} m/s</Paragraph>\n        <Paragraph>Degree: {myCity.wind?.deg} &#176;</Paragraph>\n        <Paragraph></Paragraph>\n      </Card.Content>\n      <Card.Content>\n        <Title>Miscellaneous</Title>\n        <Paragraph>\n          Sunrise:{\" \"}\n          {new Date(\n            myCity.sys?.sunrise * 1000 || Date.now()\n          ).toLocaleTimeString()}\n        </Paragraph>\n        <Paragraph>\n          Sunset:{\" \"}\n          {new Date(\n            myCity.sys?.sunset * 1000 || Date.now()\n          ).toLocaleTimeString()}\n        </Paragraph>\n        <Paragraph>Cloudiness: {myCity.clouds?.all} %</Paragraph>\n        <Paragraph>Humidity: {myCity.main?.humidity} %</Paragraph>\n        <Paragraph></Paragraph>\n      </Card.Content>\n    </Card>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}