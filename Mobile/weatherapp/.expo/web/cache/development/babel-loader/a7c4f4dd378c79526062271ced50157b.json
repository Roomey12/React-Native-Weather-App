{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.List = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _jsxFileName = \"src/basic/List.js\";\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _nativeBaseShoutemTheme = require(\"native-base-shoutem-theme\");\n\nvar _mapPropsToStyleNames = require(\"../Utils/mapPropsToStyleNames\");\n\nvar _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar List = function (_Component) {\n  _inherits(List, _Component);\n\n  function List(props) {\n    _classCallCheck(this, List);\n\n    var _this = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, props));\n\n    if (props.dataArray && props.renderRow) {\n      var rowHasChanged = props.rowHasChanged || function (r1, r2) {\n        return r1 !== r2;\n      };\n\n      var ds = new _reactNative.ListView.DataSource({\n        rowHasChanged: rowHasChanged\n      });\n      _this.state = {\n        dataSource: ds.cloneWithRows(props.dataArray)\n      };\n    } else {\n      _this.state = {};\n    }\n\n    return _this;\n  }\n\n  _createClass(List, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.state.dataSource) {\n        this.setState({\n          dataSource: this.state.dataSource.cloneWithRows(nextProps.dataArray)\n        });\n      }\n    }\n  }, {\n    key: \"renderChildren\",\n    value: function renderChildren() {\n      var childrenArray = _react2.default.Children.map(this.props.children, function (child) {\n        return child;\n      });\n\n      return childrenArray;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.dataSource) {\n        return _react2.default.createElement(_reactNative.ListView, _extends({}, this.props, {\n          ref: function ref(_ref) {\n            return _this2._root = _ref;\n          },\n          enableEmptySections: true,\n          dataSource: this.state.dataSource,\n          renderRow: this.props.renderRow,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          }\n        }));\n      }\n\n      return _react2.default.createElement(_reactNative.View, _extends({\n        ref: function ref(c) {\n          return _this2._root = c;\n        }\n      }, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        }\n      }), this.renderChildren());\n    }\n  }]);\n\n  return List;\n}(_react.Component);\n\nvar StyledList = (0, _nativeBaseShoutemTheme.connectStyle)(\"NativeBase.List\", {}, _mapPropsToStyleNames2.default)(List);\nexports.List = StyledList;","map":{"version":3,"sources":["../../../src/basic/List.js"],"names":["List","props","rowHasChanged","r1","ds","dataSource","nextProps","childrenArray","StyledList"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { ListView, View } from \"react-native\";\n\nimport { connectStyle } from \"native-base-shoutem-theme\";\nimport mapPropsToStyleNames from \"../Utils/mapPropsToStyleNames\";\n\nclass List extends Component {\n  constructor(props) {\n    super(props);\n    if (props.dataArray && props.renderRow) {\n      let rowHasChanged = props.rowHasChanged || ((r1, r2) => r1 !== r2);\n      const ds = new ListView.DataSource({ rowHasChanged: rowHasChanged });\n      this.state = {\n        dataSource: ds.cloneWithRows(props.dataArray)\n      };\n    } else {\n      this.state = {};\n    }\n  }\n  componentWillReceiveProps(nextProps) {\n    if (this.state.dataSource) {\n      this.setState({\n        dataSource: this.state.dataSource.cloneWithRows(nextProps.dataArray)\n      });\n    }\n  }\n  renderChildren() {\n    const childrenArray = React.Children.map(\n      this.props.children,\n      child => child\n    );\n\n    return childrenArray;\n  }\n\n  render() {\n    if (this.state.dataSource) {\n      return (\n        <ListView\n          {...this.props}\n          ref={ref => (this._root = ref)}\n          enableEmptySections\n          dataSource={this.state.dataSource}\n          renderRow={this.props.renderRow}\n        />\n      );\n    }\n    return (\n      <View ref={c => (this._root = c)} {...this.props}>\n        {this.renderChildren()}\n      </View>\n    );\n  }\n}\nconst StyledList = connectStyle(\"NativeBase.List\", {}, mapPropsToStyleNames)(\n  List\n);\n\nexport { StyledList as List };\n"]},"metadata":{},"sourceType":"script"}