{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport var WeatherService = function () {\n  function WeatherService() {\n    _classCallCheck(this, WeatherService);\n\n    this.API_KEY = \"&appid=8943c2c5b07c50f60fa9ae9ee8392655\";\n    this.url = \"https://api.openweathermap.org/data/2.5/weather?\";\n  }\n\n  _createClass(WeatherService, [{\n    key: \"getWeatherByCityName\",\n    value: function getWeatherByCityName(cityName) {\n      var request;\n      return _regeneratorRuntime.async(function getWeatherByCityName$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetch(this.url + \"q=\" + cityName + this.API_KEY + \"&units=metric\"));\n\n            case 2:\n              request = _context.sent;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(request.json());\n\n            case 5:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getWeatherByCityId\",\n    value: function getWeatherByCityId(cityId) {\n      var request;\n      return _regeneratorRuntime.async(function getWeatherByCityId$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(fetch(this.url + \"id=\" + cityId + this.API_KEY + \"&units=metric\"));\n\n            case 2:\n              request = _context2.sent;\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(request.json());\n\n            case 5:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }]);\n\n  return WeatherService;\n}();","map":{"version":3,"sources":["C:/Users/roomey/Desktop/react-native/weatherapp/services/weather.service.js"],"names":["WeatherService","API_KEY","url","cityName","fetch","request","json","cityId"],"mappings":";;;AAAA,WAAaA,cAAb;AAIE,4BAAc;AAAA;;AACZ,SAAKC,OAAL,GAAe,yCAAf;AACA,SAAKC,GAAL,GAAW,kDAAX;AACD;;AAPH;AAAA;AAAA,WAQE,8BAA2BC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACwBC,KAAK,CACzB,KAAKF,GAAL,GAAW,IAAX,GAAkBC,QAAlB,GAA6B,KAAKF,OAAlC,GAA4C,eADnB,CAD7B;;AAAA;AACQI,cAAAA,OADR;AAAA;AAAA,+CAIeA,OAAO,CAACC,IAAR,EAJf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AARF;AAAA;AAAA,WAcE,4BAAyBC,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACwBH,KAAK,CACzB,KAAKF,GAAL,GAAW,KAAX,GAAmBK,MAAnB,GAA4B,KAAKN,OAAjC,GAA2C,eADlB,CAD7B;;AAAA;AACQI,cAAAA,OADR;AAAA;AAAA,+CAIeA,OAAO,CAACC,IAAR,EAJf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAdF;;AAAA;AAAA","sourcesContent":["export class WeatherService {\n  API_KEY;\n  url;\n\n  constructor() {\n    this.API_KEY = \"&appid=8943c2c5b07c50f60fa9ae9ee8392655\";\n    this.url = \"https://api.openweathermap.org/data/2.5/weather?\";\n  }\n  async getWeatherByCityName(cityName) {\n    const request = await fetch(\n      this.url + \"q=\" + cityName + this.API_KEY + \"&units=metric\"\n    );\n    return await request.json();\n  }\n  async getWeatherByCityId(cityId) {\n    const request = await fetch(\n      this.url + \"id=\" + cityId + this.API_KEY + \"&units=metric\"\n    );\n    return await request.json();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}