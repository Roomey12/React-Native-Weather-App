{"ast":null,"code":"import { PropTypes } from 'react';\nimport ReactNative from \"react-native-web/dist/index\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport TimerMixin from 'react-timer-mixin';\nimport { Event } from \"react-native-web/dist/index\";\nvar _KAM_DEFAULT_TAB_BAR_HEIGHT = 49;\nvar _KAM_KEYBOARD_OPENING_TIME = 250;\nvar _KAM_EXTRA_HEIGHT = 75;\nvar KeyboardAwareMixin = {\n  mixins: [TimerMixin],\n  propTypes: {\n    enableAutoAutomaticScroll: PropTypes.bool,\n    keyboardOpeningTime: PropTypes.number,\n    extraHeight: PropTypes.number,\n    extraScrollHeight: PropTypes.number,\n    enableResetScrollToCoords: PropTypes.bool\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      enableAutoAutomaticScroll: true,\n      extraHeight: _KAM_EXTRA_HEIGHT,\n      extraScrollHeight: 0,\n      enableResetScrollToCoords: true,\n      keyboardOpeningTime: _KAM_KEYBOARD_OPENING_TIME\n    };\n  },\n  setViewIsInsideTabBar: function setViewIsInsideTabBar(viewIsInsideTabBar) {\n    this.viewIsInsideTabBar = viewIsInsideTabBar;\n    var keyboardSpace = viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT : 0;\n\n    if (this.state.keyboardSpace !== keyboardSpace) {\n      this.setState({\n        keyboardSpace: keyboardSpace\n      });\n    }\n  },\n  setResetScrollToCoords: function setResetScrollToCoords(coords) {\n    this.resetCoords = coords;\n  },\n  getInitialState: function getInitialState(props) {\n    this.viewIsInsideTabBar = false;\n    this.keyboardWillShowEvent = undefined;\n    this.keyboardWillHideEvent = undefined;\n    return {\n      keyboardSpace: 0\n    };\n  },\n  updateKeyboardSpace: function updateKeyboardSpace(frames) {\n    var _this = this;\n\n    var keyboardSpace = frames.endCoordinates.height + this.props.extraScrollHeight;\n\n    if (this.props.viewIsInsideTabBar) {\n      keyboardSpace -= _KAM_DEFAULT_TAB_BAR_HEIGHT;\n    }\n\n    this.setState({\n      keyboardSpace: keyboardSpace\n    });\n\n    if (this.props.enableAutoAutomaticScroll) {\n      var currentlyFocusedField = TextInput.State.currentlyFocusedField();\n      var responder = this.getScrollResponder();\n\n      if (!currentlyFocusedField || !responder) {\n        return;\n      }\n\n      UIManager.viewIsDescendantOf(currentlyFocusedField, responder.getInnerViewNode(), function (isAncestor) {\n        if (isAncestor) {\n          UIManager.measureInWindow(currentlyFocusedField, function (x, y, width, height) {\n            if (y + height > frames.endCoordinates.screenY - _this.props.extraScrollHeight - _this.props.extraHeight) {\n              _this.scrollToFocusedInputWithNodeHandle(currentlyFocusedField);\n            }\n          });\n        }\n      });\n    }\n\n    if (!this.resetCoords) {\n      if (!this.defaultResetScrollToCoords) {\n        this.defaultResetScrollToCoords = this.position;\n      }\n    }\n  },\n  resetKeyboardSpace: function resetKeyboardSpace() {\n    var keyboardSpace = this.props.viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT + this.props.extraScrollHeight : this.props.extraScrollHeight;\n    this.setState({\n      keyboardSpace: keyboardSpace\n    });\n\n    if (this.props.enableResetScrollToCoords === false) {\n      this.defaultResetScrollToCoords = null;\n      return;\n    } else if (this.resetCoords) {\n      this.scrollToPosition(this.resetCoords.x, this.resetCoords.y, true);\n    } else {\n      if (this.defaultResetScrollToCoords) {\n        this.scrollToPosition(this.defaultResetScrollToCoords.x, this.defaultResetScrollToCoords.y, true);\n        this.defaultResetScrollToCoords = null;\n      } else {\n        this.scrollToPosition(0, 0, true);\n      }\n    }\n  },\n  componentDidMount: function componentDidMount() {\n    this.keyboardWillShowEvent = Keyboard.addListener('keyboardWillShow', this.updateKeyboardSpace);\n    this.keyboardWillHideEvent = Keyboard.addListener('keyboardWillHide', this.resetKeyboardSpace);\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    this.keyboardWillShowEvent && this.keyboardWillShowEvent.remove();\n    this.keyboardWillHideEvent && this.keyboardWillHideEvent.remove();\n  },\n  getScrollResponder: function getScrollResponder() {\n    return this.refs._rnkasv_keyboardView && this.refs._rnkasv_keyboardView.getScrollResponder();\n  },\n  scrollToPosition: function scrollToPosition(x, y) {\n    var animated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var responder = this.getScrollResponder();\n    responder && responder.scrollResponderScrollTo({\n      x: x,\n      y: y,\n      animated: animated\n    });\n  },\n  scrollToEnd: function scrollToEnd() {\n    var animated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    var responder = this.getScrollResponder();\n    responder && responder.scrollResponderScrollToEnd({\n      animated: animated\n    });\n  },\n  scrollToFocusedInput: function scrollToFocusedInput(reactNode, extraHeight, keyboardOpeningTime) {\n    var _this2 = this;\n\n    if (extraHeight === undefined) {\n      extraHeight = this.props.extraHeight;\n    }\n\n    if (keyboardOpeningTime === undefined) {\n      keyboardOpeningTime = this.props.keyboardOpeningTime;\n    }\n\n    this.setTimeout(function () {\n      var responder = _this2.getScrollResponder();\n\n      responder && responder.scrollResponderScrollNativeHandleToKeyboard(reactNode, extraHeight, true);\n    }, keyboardOpeningTime);\n  },\n  scrollToFocusedInputWithNodeHandle: function scrollToFocusedInputWithNodeHandle(nodeID, extraHeight, keyboardOpeningTime) {\n    if (extraHeight === undefined) {\n      extraHeight = this.props.extraHeight;\n    }\n\n    if (keyboardOpeningTime === undefined) {\n      keyboardOpeningTime = this.props.keyboardOpeningTime;\n    }\n\n    var reactNode = ReactNative.findNodeHandle(nodeID);\n    this.scrollToFocusedInput(reactNode, extraHeight + this.props.extraScrollHeight, keyboardOpeningTime);\n  },\n  position: {\n    x: 0,\n    y: 0\n  },\n  defaultResetScrollToCoords: null,\n  handleOnScroll: function handleOnScroll(e) {\n    this.position = e.nativeEvent.contentOffset;\n  }\n};\nexport default KeyboardAwareMixin;","map":{"version":3,"sources":["C:/Users/roomey/Desktop/react-native/weatherapp/node_modules/react-native-keyboard-aware-scroll-view/lib/KeyboardAwareMixin.js"],"names":["PropTypes","ReactNative","TimerMixin","Event","_KAM_DEFAULT_TAB_BAR_HEIGHT","_KAM_KEYBOARD_OPENING_TIME","_KAM_EXTRA_HEIGHT","KeyboardAwareMixin","mixins","propTypes","enableAutoAutomaticScroll","bool","keyboardOpeningTime","number","extraHeight","extraScrollHeight","enableResetScrollToCoords","getDefaultProps","setViewIsInsideTabBar","viewIsInsideTabBar","keyboardSpace","state","setState","setResetScrollToCoords","coords","resetCoords","getInitialState","props","keyboardWillShowEvent","undefined","keyboardWillHideEvent","updateKeyboardSpace","frames","endCoordinates","height","currentlyFocusedField","TextInput","State","responder","getScrollResponder","UIManager","viewIsDescendantOf","getInnerViewNode","isAncestor","measureInWindow","x","y","width","screenY","scrollToFocusedInputWithNodeHandle","defaultResetScrollToCoords","position","resetKeyboardSpace","scrollToPosition","componentDidMount","Keyboard","addListener","componentWillUnmount","remove","refs","_rnkasv_keyboardView","animated","scrollResponderScrollTo","scrollToEnd","scrollResponderScrollToEnd","scrollToFocusedInput","reactNode","setTimeout","scrollResponderScrollNativeHandleToKeyboard","nodeID","findNodeHandle","handleOnScroll","e","nativeEvent","contentOffset"],"mappings":"AAEA,SAASA,SAAT,QAA0B,OAA1B;OACOC,W;;;;AACP,OAAOC,UAAP,MAAuB,mBAAvB;SAEcC,K;AAEd,IAAMC,2BAAmC,GAAG,EAA5C;AACA,IAAMC,0BAAkC,GAAG,GAA3C;AACA,IAAMC,iBAAyB,GAAG,EAAlC;AAEA,IAAMC,kBAAkB,GAAG;AACzBC,EAAAA,MAAM,EAAE,CAACN,UAAD,CADiB;AAEzBO,EAAAA,SAAS,EAAE;AACTC,IAAAA,yBAAyB,EAAEV,SAAS,CAACW,IAD5B;AAETC,IAAAA,mBAAmB,EAAEZ,SAAS,CAACa,MAFtB;AAGTC,IAAAA,WAAW,EAAEd,SAAS,CAACa,MAHd;AAITE,IAAAA,iBAAiB,EAAEf,SAAS,CAACa,MAJpB;AAKTG,IAAAA,yBAAyB,EAAEhB,SAAS,CAACW;AAL5B,GAFc;AAUzBM,EAAAA,eAAe,EAAE,2BAAY;AAC3B,WAAO;AACLP,MAAAA,yBAAyB,EAAE,IADtB;AAELI,MAAAA,WAAW,EAAER,iBAFR;AAGLS,MAAAA,iBAAiB,EAAE,CAHd;AAILC,MAAAA,yBAAyB,EAAE,IAJtB;AAKLJ,MAAAA,mBAAmB,EAAEP;AALhB,KAAP;AAOD,GAlBwB;AAoBzBa,EAAAA,qBAAqB,EAAE,+BAAUC,kBAAV,EAAoC;AACzD,SAAKA,kBAAL,GAA0BA,kBAA1B;AACA,QAAMC,aAAa,GAAGD,kBAAkB,GAAGf,2BAAH,GAAiC,CAAzE;;AACA,QAAI,KAAKiB,KAAL,CAAWD,aAAX,KAA6BA,aAAjC,EAAgD;AAC9C,WAAKE,QAAL,CAAc;AAACF,QAAAA,aAAa,EAAbA;AAAD,OAAd;AACD;AACF,GA1BwB;AA4BzBG,EAAAA,sBAAsB,EAAE,gCAAUC,MAAV,EAA0C;AAChE,SAAKC,WAAL,GAAmBD,MAAnB;AACD,GA9BwB;AAgCzBE,EAAAA,eAAe,EAAE,yBAAUC,KAAV,EAAyB;AACxC,SAAKR,kBAAL,GAA0B,KAA1B;AACA,SAAKS,qBAAL,GAA6BC,SAA7B;AACA,SAAKC,qBAAL,GAA6BD,SAA7B;AACA,WAAO;AACLT,MAAAA,aAAa,EAAE;AADV,KAAP;AAGD,GAvCwB;AA0CzBW,EAAAA,mBAAmB,EAAE,6BAAUC,MAAV,EAA0B;AAAA;;AAC7C,QAAIZ,aAAqB,GAAGY,MAAM,CAACC,cAAP,CAAsBC,MAAtB,GAA+B,KAAKP,KAAL,CAAWZ,iBAAtE;;AACA,QAAI,KAAKY,KAAL,CAAWR,kBAAf,EAAmC;AACjCC,MAAAA,aAAa,IAAIhB,2BAAjB;AACD;;AACD,SAAKkB,QAAL,CAAc;AAACF,MAAAA,aAAa,EAAbA;AAAD,KAAd;;AAEA,QAAI,KAAKO,KAAL,CAAWjB,yBAAf,EAA0C;AACxC,UAAMyB,qBAAqB,GAAGC,SAAS,CAACC,KAAV,CAAgBF,qBAAhB,EAA9B;AACA,UAAMG,SAAS,GAAG,KAAKC,kBAAL,EAAlB;;AACA,UAAI,CAACJ,qBAAD,IAA0B,CAACG,SAA/B,EAA0C;AACxC;AACD;;AACDE,MAAAA,SAAS,CAACC,kBAAV,CACEN,qBADF,EAEEG,SAAS,CAACI,gBAAV,EAFF,EAGE,UAACC,UAAD,EAAgB;AACd,YAAIA,UAAJ,EAAgB;AAEdH,UAAAA,SAAS,CAACI,eAAV,CAA0BT,qBAA1B,EAAiD,UAACU,CAAD,EAAIC,CAAJ,EAAOC,KAAP,EAAcb,MAAd,EAAyB;AACxE,gBAAIY,CAAC,GAAGZ,MAAJ,GAAaF,MAAM,CAACC,cAAP,CAAsBe,OAAtB,GAAgC,KAAI,CAACrB,KAAL,CAAWZ,iBAA3C,GAA+D,KAAI,CAACY,KAAL,CAAWb,WAA3F,EAAwG;AACtG,cAAA,KAAI,CAACmC,kCAAL,CAAwCd,qBAAxC;AACD;AACF,WAJD;AAKD;AACF,OAZH;AAcD;;AACD,QAAI,CAAC,KAAKV,WAAV,EAAuB;AACrB,UAAI,CAAC,KAAKyB,0BAAV,EAAsC;AACpC,aAAKA,0BAAL,GAAkC,KAAKC,QAAvC;AACD;AACF;AACF,GA3EwB;AA6EzBC,EAAAA,kBAAkB,EAAE,8BAAY;AAC9B,QAAMhC,aAAqB,GAAI,KAAKO,KAAL,CAAWR,kBAAZ,GAAkCf,2BAA2B,GAAG,KAAKuB,KAAL,CAAWZ,iBAA3E,GAA+F,KAAKY,KAAL,CAAWZ,iBAAxI;AACA,SAAKO,QAAL,CAAc;AAACF,MAAAA,aAAa,EAAbA;AAAD,KAAd;;AAEA,QAAI,KAAKO,KAAL,CAAWX,yBAAX,KAAyC,KAA7C,EAAoD;AAClD,WAAKkC,0BAAL,GAAkC,IAAlC;AACA;AACD,KAHD,MAGO,IAAI,KAAKzB,WAAT,EAAsB;AAC3B,WAAK4B,gBAAL,CAAsB,KAAK5B,WAAL,CAAiBoB,CAAvC,EAA0C,KAAKpB,WAAL,CAAiBqB,CAA3D,EAA8D,IAA9D;AACD,KAFM,MAEA;AACL,UAAI,KAAKI,0BAAT,EAAqC;AACnC,aAAKG,gBAAL,CAAsB,KAAKH,0BAAL,CAAgCL,CAAtD,EAAyD,KAAKK,0BAAL,CAAgCJ,CAAzF,EAA4F,IAA5F;AACA,aAAKI,0BAAL,GAAkC,IAAlC;AACD,OAHD,MAGO;AACL,aAAKG,gBAAL,CAAsB,CAAtB,EAAyB,CAAzB,EAA4B,IAA5B;AACD;AACF;AACF,GA9FwB;AAgGzBC,EAAAA,iBAAiB,EAAE,6BAAY;AAE7B,SAAK1B,qBAAL,GAA6B2B,QAAQ,CAACC,WAAT,CAAqB,kBAArB,EAAyC,KAAKzB,mBAA9C,CAA7B;AACA,SAAKD,qBAAL,GAA6ByB,QAAQ,CAACC,WAAT,CAAqB,kBAArB,EAAyC,KAAKJ,kBAA9C,CAA7B;AACD,GApGwB;AAsGzBK,EAAAA,oBAAoB,EAAE,gCAAY;AAChC,SAAK7B,qBAAL,IAA8B,KAAKA,qBAAL,CAA2B8B,MAA3B,EAA9B;AACA,SAAK5B,qBAAL,IAA8B,KAAKA,qBAAL,CAA2B4B,MAA3B,EAA9B;AACD,GAzGwB;AA2GzBnB,EAAAA,kBA3GyB,gCA2GJ;AACnB,WAAO,KAAKoB,IAAL,CAAUC,oBAAV,IAAkC,KAAKD,IAAL,CAAUC,oBAAV,CAA+BrB,kBAA/B,EAAzC;AACD,GA7GwB;AA+GzBc,EAAAA,gBAAgB,EAAE,0BAAUR,CAAV,EAAqBC,CAArB,EAAuD;AAAA,QAAvBe,QAAuB,uEAAN,IAAM;AACvE,QAAMvB,SAAS,GAAG,KAAKC,kBAAL,EAAlB;AACAD,IAAAA,SAAS,IAAIA,SAAS,CAACwB,uBAAV,CAAkC;AAACjB,MAAAA,CAAC,EAAEA,CAAJ;AAAOC,MAAAA,CAAC,EAAEA,CAAV;AAAae,MAAAA,QAAQ,EAAEA;AAAvB,KAAlC,CAAb;AACD,GAlHwB;AAoHzBE,EAAAA,WAAW,EAAE,uBAAkC;AAAA,QAAxBF,QAAwB,uEAAN,IAAM;AAC7C,QAAMvB,SAAS,GAAG,KAAKC,kBAAL,EAAlB;AACAD,IAAAA,SAAS,IAAIA,SAAS,CAAC0B,0BAAV,CAAqC;AAACH,MAAAA,QAAQ,EAAEA;AAAX,KAArC,CAAb;AACD,GAvHwB;AA6HzBI,EAAAA,oBAAoB,EAAE,8BAAUC,SAAV,EAA6BpD,WAA7B,EAAkDF,mBAAlD,EAA+E;AAAA;;AACnG,QAAIE,WAAW,KAAKe,SAApB,EAA+B;AAC3Bf,MAAAA,WAAW,GAAG,KAAKa,KAAL,CAAWb,WAAzB;AACH;;AAED,QAAIF,mBAAmB,KAAKiB,SAA5B,EAAuC;AACnCjB,MAAAA,mBAAmB,GAAG,KAAKe,KAAL,CAAWf,mBAAjC;AACH;;AAED,SAAKuD,UAAL,CAAgB,YAAM;AACpB,UAAM7B,SAAS,GAAG,MAAI,CAACC,kBAAL,EAAlB;;AACAD,MAAAA,SAAS,IAAIA,SAAS,CAAC8B,2CAAV,CACXF,SADW,EACApD,WADA,EACa,IADb,CAAb;AAGD,KALD,EAKGF,mBALH;AAMD,GA5IwB;AA8IzBqC,EAAAA,kCAAkC,EAAE,4CAAUoB,MAAV,EAA0BvD,WAA1B,EAA+CF,mBAA/C,EAA4E;AAC9G,QAAIE,WAAW,KAAKe,SAApB,EAA+B;AAC3Bf,MAAAA,WAAW,GAAG,KAAKa,KAAL,CAAWb,WAAzB;AACH;;AAED,QAAIF,mBAAmB,KAAKiB,SAA5B,EAAuC;AACnCjB,MAAAA,mBAAmB,GAAG,KAAKe,KAAL,CAAWf,mBAAjC;AACH;;AAED,QAAMsD,SAAS,GAAGjE,WAAW,CAACqE,cAAZ,CAA2BD,MAA3B,CAAlB;AACA,SAAKJ,oBAAL,CAA0BC,SAA1B,EAAqCpD,WAAW,GAAG,KAAKa,KAAL,CAAWZ,iBAA9D,EAAiFH,mBAAjF;AACD,GAzJwB;AA2JzBuC,EAAAA,QAAQ,EAAE;AAACN,IAAAA,CAAC,EAAE,CAAJ;AAAOC,IAAAA,CAAC,EAAE;AAAV,GA3Je;AA6JzBI,EAAAA,0BAA0B,EAAE,IA7JH;AA+JzBqB,EAAAA,cAAc,EAAE,wBAAUC,CAAV,EAAoB;AAClC,SAAKrB,QAAL,GAAgBqB,CAAC,CAACC,WAAF,CAAcC,aAA9B;AACD;AAjKwB,CAA3B;AAoKA,eAAenE,kBAAf","sourcesContent":["/* @flow */\n\nimport { PropTypes } from 'react'\nimport ReactNative, { TextInput, Keyboard, UIManager } from 'react-native'\nimport TimerMixin from 'react-timer-mixin'\n\nimport type { Event } from 'react-native'\n\nconst _KAM_DEFAULT_TAB_BAR_HEIGHT: number = 49\nconst _KAM_KEYBOARD_OPENING_TIME: number = 250\nconst _KAM_EXTRA_HEIGHT: number = 75\n\nconst KeyboardAwareMixin = {\n  mixins: [TimerMixin],\n  propTypes: {\n    enableAutoAutomaticScroll: PropTypes.bool,\n    keyboardOpeningTime: PropTypes.number,\n    extraHeight: PropTypes.number,\n    extraScrollHeight: PropTypes.number,\n    enableResetScrollToCoords: PropTypes.bool,\n  },\n\n  getDefaultProps: function () {\n    return {\n      enableAutoAutomaticScroll: true,\n      extraHeight: _KAM_EXTRA_HEIGHT,\n      extraScrollHeight: 0,\n      enableResetScrollToCoords: true,\n      keyboardOpeningTime: _KAM_KEYBOARD_OPENING_TIME,\n    }\n  },\n\n  setViewIsInsideTabBar: function (viewIsInsideTabBar: bool) {\n    this.viewIsInsideTabBar = viewIsInsideTabBar\n    const keyboardSpace = viewIsInsideTabBar ? _KAM_DEFAULT_TAB_BAR_HEIGHT : 0\n    if (this.state.keyboardSpace !== keyboardSpace) {\n      this.setState({keyboardSpace})\n    }\n  },\n\n  setResetScrollToCoords: function (coords: {x: number, y: number}) {\n    this.resetCoords = coords\n  },\n\n  getInitialState: function (props: Object) {\n    this.viewIsInsideTabBar = false\n    this.keyboardWillShowEvent = undefined\n    this.keyboardWillHideEvent = undefined\n    return {\n      keyboardSpace: 0,\n    }\n  },\n\n  // Keyboard actions\n  updateKeyboardSpace: function (frames: Object) {\n    let keyboardSpace: number = frames.endCoordinates.height + this.props.extraScrollHeight\n    if (this.props.viewIsInsideTabBar) {\n      keyboardSpace -= _KAM_DEFAULT_TAB_BAR_HEIGHT\n    }\n    this.setState({keyboardSpace})\n    // Automatically scroll to focused TextInput\n    if (this.props.enableAutoAutomaticScroll) {\n      const currentlyFocusedField = TextInput.State.currentlyFocusedField()\n      const responder = this.getScrollResponder();\n      if (!currentlyFocusedField || !responder) {\n        return\n      }\n      UIManager.viewIsDescendantOf(\n        currentlyFocusedField,\n        responder.getInnerViewNode(),\n        (isAncestor) => {\n          if (isAncestor) {\n            // Check if the TextInput will be hidden by the keyboard\n            UIManager.measureInWindow(currentlyFocusedField, (x, y, width, height) => {\n              if (y + height > frames.endCoordinates.screenY - this.props.extraScrollHeight - this.props.extraHeight) {\n                this.scrollToFocusedInputWithNodeHandle(currentlyFocusedField)\n              }\n            })\n          }\n        }\n      )\n    }\n    if (!this.resetCoords) {\n      if (!this.defaultResetScrollToCoords) {\n        this.defaultResetScrollToCoords = this.position\n      }\n    }\n  },\n\n  resetKeyboardSpace: function () {\n    const keyboardSpace: number = (this.props.viewIsInsideTabBar) ? _KAM_DEFAULT_TAB_BAR_HEIGHT + this.props.extraScrollHeight : this.props.extraScrollHeight\n    this.setState({keyboardSpace})\n    // Reset scroll position after keyboard dismissal\n    if (this.props.enableResetScrollToCoords === false) {\n      this.defaultResetScrollToCoords = null\n      return\n    } else if (this.resetCoords) {\n      this.scrollToPosition(this.resetCoords.x, this.resetCoords.y, true)\n    } else {\n      if (this.defaultResetScrollToCoords) {\n        this.scrollToPosition(this.defaultResetScrollToCoords.x, this.defaultResetScrollToCoords.y, true)\n        this.defaultResetScrollToCoords = null\n      } else {\n        this.scrollToPosition(0, 0, true)\n      }\n    }\n  },\n\n  componentDidMount: function () {\n    // Keyboard events\n    this.keyboardWillShowEvent = Keyboard.addListener('keyboardWillShow', this.updateKeyboardSpace)\n    this.keyboardWillHideEvent = Keyboard.addListener('keyboardWillHide', this.resetKeyboardSpace)\n  },\n\n  componentWillUnmount: function () {\n    this.keyboardWillShowEvent && this.keyboardWillShowEvent.remove()\n    this.keyboardWillHideEvent && this.keyboardWillHideEvent.remove()\n  },\n\n  getScrollResponder() {\n    return this.refs._rnkasv_keyboardView && this.refs._rnkasv_keyboardView.getScrollResponder()\n  },\n\n  scrollToPosition: function (x: number, y: number, animated: bool = true) {\n    const responder = this.getScrollResponder();\n    responder && responder.scrollResponderScrollTo({x: x, y: y, animated: animated})\n  },\n\n  scrollToEnd: function (animated?: bool = true) {\n    const responder = this.getScrollResponder();\n    responder && responder.scrollResponderScrollToEnd({animated: animated})\n  },\n\n  /**\n   * @param keyboardOpeningTime: takes a different keyboardOpeningTime in consideration.\n   * @param extraHeight: takes an extra height in consideration.\n   */\n  scrollToFocusedInput: function (reactNode: Object, extraHeight: number, keyboardOpeningTime: number) {\n    if (extraHeight === undefined) {\n        extraHeight = this.props.extraHeight;\n    }\n\n    if (keyboardOpeningTime === undefined) {\n        keyboardOpeningTime = this.props.keyboardOpeningTime;\n    }\n\n    this.setTimeout(() => {\n      const responder = this.getScrollResponder();\n      responder && responder.scrollResponderScrollNativeHandleToKeyboard(\n        reactNode, extraHeight, true\n      )\n    }, keyboardOpeningTime)\n  },\n\n  scrollToFocusedInputWithNodeHandle: function (nodeID: number, extraHeight: number, keyboardOpeningTime: number) {\n    if (extraHeight === undefined) {\n        extraHeight = this.props.extraHeight;\n    }\n\n    if (keyboardOpeningTime === undefined) {\n        keyboardOpeningTime = this.props.keyboardOpeningTime;\n    }\n\n    const reactNode = ReactNative.findNodeHandle(nodeID)\n    this.scrollToFocusedInput(reactNode, extraHeight + this.props.extraScrollHeight, keyboardOpeningTime)\n  },\n\n  position: {x: 0, y: 0},\n\n  defaultResetScrollToCoords: null, // format: {x: 0, y: 0}\n\n  handleOnScroll: function (e: Event) {\n    this.position = e.nativeEvent.contentOffset\n  },\n}\n\nexport default KeyboardAwareMixin\n"]},"metadata":{},"sourceType":"module"}