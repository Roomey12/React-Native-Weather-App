{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListItem = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _jsxFileName = \"src/basic/ListItem.js\";\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar _nativeBaseShoutemTheme = require(\"native-base-shoutem-theme\");\n\nvar _mapPropsToStyleNames = require(\"../Utils/mapPropsToStyleNames\");\n\nvar _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);\n\nvar _platform = require(\"../theme/variables/platform\");\n\nvar _platform2 = _interopRequireDefault(_platform);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar ListItem = function (_Component) {\n  _inherits(ListItem, _Component);\n\n  function ListItem() {\n    _classCallCheck(this, ListItem);\n\n    return _possibleConstructorReturn(this, (ListItem.__proto__ || Object.getPrototypeOf(ListItem)).apply(this, arguments));\n  }\n\n  _createClass(ListItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var variables = this.context.theme ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables : _platform2.default;\n\n      if (_reactNative.Platform.OS === \"ios\" || _platform2.default.androidRipple === false || !this.props.onPress && !this.props.onLongPress || _reactNative.Platform.Version <= 21) {\n        return _react2.default.createElement(_reactNative.TouchableHighlight, {\n          onPress: this.props.onPress,\n          onLongPress: this.props.onLongPress,\n          ref: function ref(c) {\n            return _this2._root = c;\n          },\n          underlayColor: variables.listBtnUnderlayColor,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          }\n        }, _react2.default.createElement(_reactNative.View, _extends({}, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          }\n        }), this.props.children));\n      } else {\n        return _react2.default.createElement(_reactNative.TouchableNativeFeedback, {\n          ref: function ref(c) {\n            return _this2._root = c;\n          },\n          onPress: this.props.onPress,\n          onLongPress: this.props.onLongPress,\n          background: this.props.androidRippleColor ? _reactNative.TouchableNativeFeedback.Ripple(this.props.androidRippleColor) : _reactNative.TouchableNativeFeedback.Ripple(_platform2.default.androidRippleColorDark),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          }\n        }, _react2.default.createElement(_reactNative.View, {\n          style: {\n            marginLeft: -17,\n            paddingLeft: 17\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          }\n        }, _react2.default.createElement(_reactNative.View, _extends({}, this.props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          }\n        }), this.props.children)));\n      }\n    }\n  }]);\n\n  return ListItem;\n}(_react.Component);\n\nListItem.contextTypes = {\n  theme: _react2.default.PropTypes.object\n};\nListItem.propTypes = _extends({}, _reactNative.TouchableHighlight.propTypes, {\n  style: _react2.default.PropTypes.object,\n  itemDivider: _react2.default.PropTypes.bool,\n  button: _react2.default.PropTypes.bool\n});\nvar StyledListItem = (0, _nativeBaseShoutemTheme.connectStyle)(\"NativeBase.ListItem\", {}, _mapPropsToStyleNames2.default)(ListItem);\nexports.ListItem = StyledListItem;","map":{"version":3,"sources":["../../../src/basic/ListItem.js"],"names":["ListItem","contextTypes","theme","variables","marginLeft","paddingLeft","style","itemDivider","button","StyledListItem"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  TouchableHighlight,\n  Platform,\n  TouchableNativeFeedback,\n  View\n} from \"react-native\";\n\nimport { connectStyle } from \"native-base-shoutem-theme\";\nimport mapPropsToStyleNames from \"../Utils/mapPropsToStyleNames\";\nimport variable from \"../theme/variables/platform\";\n\nclass ListItem extends Component {\n  static contextTypes = {\n    theme: React.PropTypes.object\n  };\n  render() {\n    const variables = this.context.theme\n      ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables\n      : variable;\n\n    if (\n      Platform.OS === \"ios\" ||\n      variable.androidRipple === false ||\n      (!this.props.onPress && !this.props.onLongPress) ||\n      Platform.Version <= 21\n    ) {\n      return (\n        <TouchableHighlight\n          onPress={this.props.onPress}\n          onLongPress={this.props.onLongPress}\n          ref={c => (this._root = c)}\n          underlayColor={variables.listBtnUnderlayColor}\n        >\n          <View {...this.props}>{this.props.children}</View>\n        </TouchableHighlight>\n      );\n    } else {\n      return (\n        <TouchableNativeFeedback\n          ref={c => (this._root = c)}\n          onPress={this.props.onPress}\n          onLongPress={this.props.onLongPress}\n          background={\n            this.props.androidRippleColor\n              ? TouchableNativeFeedback.Ripple(this.props.androidRippleColor)\n              : TouchableNativeFeedback.Ripple(variable.androidRippleColorDark)\n          }\n        >\n          <View style={{ marginLeft: -17, paddingLeft: 17 }}>\n            <View {...this.props}>{this.props.children}</View>\n          </View>\n        </TouchableNativeFeedback>\n      );\n    }\n  }\n}\n\nListItem.propTypes = {\n  ...TouchableHighlight.propTypes,\n  style: React.PropTypes.object,\n  itemDivider: React.PropTypes.bool,\n  button: React.PropTypes.bool\n};\n\nconst StyledListItem = connectStyle(\n  \"NativeBase.ListItem\",\n  {},\n  mapPropsToStyleNames\n)(ListItem);\n\nexport { StyledListItem as ListItem };\n"]},"metadata":{},"sourceType":"script"}