{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _jsxFileName = \"src/basic/Swipe/NativeButton.js\";\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar styles = _reactNative.StyleSheet.create({\n  button: {\n    flexDirection: \"row\",\n    alignSelf: \"stretch\",\n    justifyContent: \"center\"\n  },\n  textButton: {\n    fontSize: 14,\n    alignSelf: \"center\"\n  },\n  opacity: {\n    opacity: 0.8\n  }\n});\n\nvar NativeButton = _react2.default.createClass({\n  displayName: \"NativeButton\",\n  propTypes: _extends({}, _reactNative.TouchableWithoutFeedback.propTypes, {\n    textStyle: _reactNative.Text.propTypes.style,\n    disabledStyle: _reactNative.Text.propTypes.style,\n    children: _react.PropTypes.node.isRequired,\n    underlayColor: _react.PropTypes.string,\n    background: _reactNative.TouchableNativeFeedback.propTypes ? _reactNative.TouchableNativeFeedback.propTypes.background : _react.PropTypes.any\n  }),\n  statics: {\n    isAndroid: _reactNative.Platform.OS === \"android\"\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      textStyle: null,\n      disabledStyle: null,\n      underlayColor: null\n    };\n  },\n  _renderText: function _renderText() {\n    if (typeof this.props.children !== \"string\") {\n      return this.props.children;\n    }\n\n    return _react2.default.createElement(_reactNative.Text, {\n      style: [styles.textButton, this.props.textStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      }\n    }, this.props.children);\n  },\n  render: function render() {\n    var disabledStyle = this.props.disabled ? this.props.disabledStyle || styles.opacity : {};\n    var buttonProps = {\n      accessibilityComponentType: this.props.accessibilityComponentType,\n      accessibilityTraits: this.props.accessibilityTraits,\n      accessible: this.props.accessible,\n      delayLongPress: this.props.delayLongPress,\n      delayPressIn: this.props.delayPressIn,\n      delayPressOut: this.props.delayPressOut,\n      disabled: this.props.disabled,\n      hitSlop: this.props.hitSlop,\n      onLayout: this.props.onLayout,\n      onPress: this.props.onPress,\n      onPressIn: this.props.onPressIn,\n      onPressOut: this.props.onPressOut,\n      onLongPress: this.props.onLongPress,\n      pressRetentionOffset: this.props.pressRetentionOffset\n    };\n\n    if (NativeButton.isAndroid) {\n      buttonProps = _extends(buttonProps, {\n        background: this.props.background || _reactNative.TouchableNativeFeedback.SelectableBackground()\n      });\n      return _react2.default.createElement(_reactNative.TouchableNativeFeedback, _extends({}, buttonProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        }\n      }), _react2.default.createElement(_reactNative.View, {\n        style: [styles.button, this.props.style, disabledStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        }\n      }, this._renderText()));\n    }\n\n    return _react2.default.createElement(_reactNative.TouchableHighlight, _extends({}, buttonProps, {\n      style: [styles.button, this.props.style, disabledStyle],\n      underlayColor: this.props.underlayColor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      }\n    }), this._renderText());\n  }\n});\n\nexports.default = NativeButton;","map":{"version":3,"sources":["../../../../src/basic/Swipe/NativeButton.js"],"names":["styles","button","flexDirection","alignSelf","justifyContent","textButton","fontSize","opacity","NativeButton","propTypes","textStyle","disabledStyle","children","underlayColor","background","statics","isAndroid","getDefaultProps","_renderText","render","buttonProps","accessibilityComponentType","accessibilityTraits","accessible","delayLongPress","delayPressIn","delayPressOut","disabled","hitSlop","onLayout","onPress","onPressIn","onPressOut","onLongPress","pressRetentionOffset"],"mappings":"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","sourcesContent":["import React, { PropTypes } from \"react\";\n\nimport {\n  TouchableWithoutFeedback,\n  TouchableNativeFeedback,\n  TouchableHighlight,\n  Text,\n  StyleSheet,\n  Platform,\n  View\n} from \"react-native\";\n\nconst styles = StyleSheet.create({\n  button: {\n    flexDirection: \"row\",\n    alignSelf: \"stretch\",\n    justifyContent: \"center\"\n  },\n  textButton: {\n    fontSize: 14,\n    alignSelf: \"center\"\n  },\n  opacity: {\n    opacity: 0.8\n  }\n});\n\nconst NativeButton = React.createClass({\n  propTypes: {\n    // Extract parent props\n    ...TouchableWithoutFeedback.propTypes,\n    textStyle: Text.propTypes.style,\n    disabledStyle: Text.propTypes.style,\n    children: PropTypes.node.isRequired,\n    underlayColor: PropTypes.string,\n    background: TouchableNativeFeedback.propTypes\n      ? TouchableNativeFeedback.propTypes.background\n      : PropTypes.any\n  },\n\n  statics: {\n    isAndroid: Platform.OS === \"android\"\n  },\n\n  getDefaultProps: function() {\n    return {\n      textStyle: null,\n      disabledStyle: null,\n      underlayColor: null\n    };\n  },\n\n  _renderText: function() {\n    // If children is not a string don't wrapp it in a Text component\n    if (typeof this.props.children !== \"string\") {\n      return this.props.children;\n    }\n\n    return (\n      <Text style={[styles.textButton, this.props.textStyle]}>\n        {this.props.children}\n      </Text>\n    );\n  },\n\n  render: function() {\n    const disabledStyle = this.props.disabled\n      ? this.props.disabledStyle || styles.opacity\n      : {};\n\n    // Extract Button props\n    let buttonProps = {\n      accessibilityComponentType: this.props.accessibilityComponentType,\n      accessibilityTraits: this.props.accessibilityTraits,\n      accessible: this.props.accessible,\n      delayLongPress: this.props.delayLongPress,\n      delayPressIn: this.props.delayPressIn,\n      delayPressOut: this.props.delayPressOut,\n      disabled: this.props.disabled,\n      hitSlop: this.props.hitSlop,\n      onLayout: this.props.onLayout,\n      onPress: this.props.onPress,\n      onPressIn: this.props.onPressIn,\n      onPressOut: this.props.onPressOut,\n      onLongPress: this.props.onLongPress,\n      pressRetentionOffset: this.props.pressRetentionOffset\n    };\n\n    // Render Native Android Button\n    if (NativeButton.isAndroid) {\n      buttonProps = Object.assign(buttonProps, {\n        background:\n          this.props.background ||\n            TouchableNativeFeedback.SelectableBackground()\n      });\n\n      return (\n        <TouchableNativeFeedback {...buttonProps}>\n          <View style={[styles.button, this.props.style, disabledStyle]}>\n            {this._renderText()}\n          </View>\n        </TouchableNativeFeedback>\n      );\n    }\n\n    // Render default button\n    return (\n      <TouchableHighlight\n        {...buttonProps}\n        style={[styles.button, this.props.style, disabledStyle]}\n        underlayColor={this.props.underlayColor}\n      >\n        {this._renderText()}\n      </TouchableHighlight>\n    );\n  }\n});\n\nexport default NativeButton;\n"]},"metadata":{},"sourceType":"script"}