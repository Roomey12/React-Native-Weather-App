{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ScrollableTab = undefined;\nvar _jsxFileName = \"src/basic/Tabs/ScrollableTabBar.js\";\n\nvar _nativeBaseShoutemTheme = require(\"native-base-shoutem-theme\");\n\nvar _platform = require(\"./../../theme/variables/platform\");\n\nvar _platform2 = _interopRequireDefault(_platform);\n\nvar _index = require(\"./../../index\");\n\nvar _lodash = require(\"lodash\");\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar React = require(\"react\");\n\nvar ReactNative = require(\"react-native-web/dist/index\");\n\nvar View = ReactNative.View,\n    Animated = ReactNative.Animated,\n    StyleSheet = ReactNative.StyleSheet,\n    ScrollView = ReactNative.ScrollView,\n    Platform = ReactNative.Platform,\n    Dimensions = ReactNative.Dimensions,\n    ViewPropTypes = ReactNative.ViewPropTypes;\n\nvar Button = require(\"./Button\");\n\nvar WINDOW_WIDTH = Dimensions.get(\"window\").width;\nvar ScrollableTabBar = React.createClass({\n  displayName: \"ScrollableTabBar\",\n  propTypes: {\n    goToPage: React.PropTypes.func,\n    activeTab: React.PropTypes.number,\n    tabs: React.PropTypes.array,\n    backgroundColor: React.PropTypes.string,\n    activeTextColor: React.PropTypes.string,\n    inactiveTextColor: React.PropTypes.string,\n    scrollOffset: React.PropTypes.number,\n    style: ViewPropTypes.style,\n    tabStyle: ViewPropTypes.style,\n    tabsContainerStyle: ViewPropTypes.style,\n    renderTab: React.PropTypes.func,\n    underlineStyle: ViewPropTypes.style,\n    onScroll: React.PropTypes.func\n  },\n  contextTypes: {\n    theme: React.PropTypes.object\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      scrollOffset: 52,\n      activeTextColor: \"navy\",\n      inactiveTextColor: \"black\",\n      backgroundColor: null,\n      style: {},\n      tabStyle: {},\n      tabsContainerStyle: {},\n      underlineStyle: {}\n    };\n  },\n  getInitialState: function getInitialState() {\n    this._tabsMeasurements = [];\n    return {\n      _leftTabUnderline: new Animated.Value(0),\n      _widthTabUnderline: new Animated.Value(0),\n      _containerWidth: null\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    this.props.scrollValue.addListener(this.updateView);\n  },\n  updateView: function updateView(offset) {\n    var position = Math.floor(offset.value);\n    var pageOffset = offset.value % 1;\n    var tabCount = this.props.tabs.length;\n    var lastTabPosition = tabCount - 1;\n\n    if (tabCount === 0 || offset.value < 0 || offset.value > lastTabPosition) {\n      return;\n    }\n\n    if (this.necessarilyMeasurementsCompleted(position, position === lastTabPosition)) {\n      this.updateTabPanel(position, pageOffset);\n      this.updateTabUnderline(position, pageOffset, tabCount);\n    }\n  },\n  necessarilyMeasurementsCompleted: function necessarilyMeasurementsCompleted(position, isLastTab) {\n    return this._tabsMeasurements[position] && (isLastTab || this._tabsMeasurements[position + 1]) && this._tabContainerMeasurements && this._containerMeasurements;\n  },\n  updateTabPanel: function updateTabPanel(position, pageOffset) {\n    var containerWidth = this._containerMeasurements.width;\n    var tabWidth = this._tabsMeasurements[position].width;\n    var nextTabMeasurements = this._tabsMeasurements[position + 1];\n    var nextTabWidth = nextTabMeasurements && nextTabMeasurements.width || 0;\n    var tabOffset = this._tabsMeasurements[position].left;\n    var absolutePageOffset = pageOffset * tabWidth;\n    var newScrollX = tabOffset + absolutePageOffset;\n    newScrollX -= (containerWidth - (1 - pageOffset) * tabWidth - pageOffset * nextTabWidth) / 2;\n    newScrollX = newScrollX >= 0 ? newScrollX : 0;\n\n    if (Platform.OS === \"android\") {\n      this._scrollView.scrollTo({\n        x: newScrollX,\n        y: 0,\n        animated: false\n      });\n    } else {\n      var rightBoundScroll = this._tabContainerMeasurements.width - this._containerMeasurements.width;\n      newScrollX = newScrollX > rightBoundScroll ? rightBoundScroll : newScrollX;\n\n      this._scrollView.scrollTo({\n        x: newScrollX,\n        y: 0,\n        animated: false\n      });\n    }\n  },\n  updateTabUnderline: function updateTabUnderline(position, pageOffset, tabCount) {\n    var lineLeft = this._tabsMeasurements[position].left;\n    var lineRight = this._tabsMeasurements[position].right;\n\n    if (position < tabCount - 1) {\n      var nextTabLeft = this._tabsMeasurements[position + 1].left;\n      var nextTabRight = this._tabsMeasurements[position + 1].right;\n      var newLineLeft = pageOffset * nextTabLeft + (1 - pageOffset) * lineLeft;\n      var newLineRight = pageOffset * nextTabRight + (1 - pageOffset) * lineRight;\n\n      this.state._leftTabUnderline.setValue(newLineLeft);\n\n      this.state._widthTabUnderline.setValue(newLineRight - newLineLeft);\n    } else {\n      this.state._leftTabUnderline.setValue(lineLeft);\n\n      this.state._widthTabUnderline.setValue(lineRight - lineLeft);\n    }\n  },\n  renderTab: function renderTab(name, page, isTabActive, onPressHandler, onLayoutHandler, tabStyle, activeTabStyle, textStyle, activeTextStyle, tabHeaderStyle) {\n    var headerContent = typeof name !== \"string\" ? name.props.children : undefined;\n    var _props = this.props,\n        activeTextColor = _props.activeTextColor,\n        inactiveTextColor = _props.inactiveTextColor;\n    var textColor = isTabActive ? activeTextColor : inactiveTextColor;\n    var fontWeight = isTabActive ? \"bold\" : \"normal\";\n\n    if (typeof name === \"string\") {\n      return React.createElement(Button, {\n        key: name + \"_\" + page,\n        onPress: function onPress() {\n          return onPressHandler(page);\n        },\n        onLayout: onLayoutHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        }\n      }, React.createElement(_index.TabHeading, {\n        scrollable: true,\n        style: isTabActive ? activeTabStyle : tabStyle,\n        active: isTabActive,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        }\n      }, React.createElement(_index.Text, {\n        style: isTabActive ? activeTextStyle : textStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        }\n      }, name)));\n    } else {\n      return React.createElement(Button, {\n        key: _lodash2.default.random(1.2, 5.2),\n        onPress: function onPress() {\n          return onPressHandler(page);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        }\n      }, React.createElement(_index.TabHeading, {\n        scrollable: true,\n        style: tabHeaderStyle,\n        active: isTabActive,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        }\n      }, headerContent));\n    }\n  },\n  measureTab: function measureTab(page, event) {\n    var _event$nativeEvent$la = event.nativeEvent.layout,\n        x = _event$nativeEvent$la.x,\n        width = _event$nativeEvent$la.width,\n        height = _event$nativeEvent$la.height;\n    this._tabsMeasurements[page] = {\n      left: x,\n      right: x + width,\n      width: width,\n      height: height\n    };\n    this.updateView({\n      value: this.props.scrollValue._value\n    });\n  },\n  render: function render() {\n    var _this = this;\n\n    var variables = this.context.theme ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables : _platform2.default;\n    var tabUnderlineStyle = {\n      position: \"absolute\",\n      height: 4,\n      backgroundColor: variables.topTabBarActiveBorderColor,\n      bottom: 0\n    };\n    var dynamicTabUnderline = {\n      left: this.state._leftTabUnderline,\n      width: this.state._widthTabUnderline\n    };\n    return React.createElement(View, {\n      style: [styles.container, {\n        backgroundColor: this.props.backgroundColor\n      }, this.props.style],\n      onLayout: this.onContainerLayout,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      }\n    }, React.createElement(ScrollView, {\n      automaticallyAdjustContentInsets: false,\n      ref: function ref(scrollView) {\n        _this._scrollView = scrollView;\n      },\n      horizontal: true,\n      showsHorizontalScrollIndicator: false,\n      showsVerticalScrollIndicator: false,\n      directionalLockEnabled: true,\n      onScroll: this.props.onScroll,\n      bounces: false,\n      scrollsToTop: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      }\n    }, React.createElement(View, {\n      style: [styles.tabs, {\n        width: this.state._containerWidth\n      }, this.props.tabsContainerStyle],\n      ref: \"tabContainer\",\n      onLayout: this.onTabContainerLayout,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      }\n    }, this.props.tabs.map(function (name, page) {\n      var isTabActive = _this.props.activeTab === page;\n      var renderTab = _this.props.renderTab || _this.renderTab;\n      return renderTab(name, page, isTabActive, _this.props.goToPage, _this.measureTab.bind(_this, page), _this.props.tabStyle[page], _this.props.activeTabStyle[page], _this.props.textStyle[page], _this.props.activeTextStyle[page], _this.props.tabHeaderStyle[page]);\n    }), React.createElement(Animated.View, {\n      style: [tabUnderlineStyle, dynamicTabUnderline, this.props.underlineStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      }\n    }))));\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    if (!_lodash2.default.isEqual(this.props.tabs, nextProps.tabs) && this.state._containerWidth) {\n      this.setState({\n        _containerWidth: null\n      });\n    }\n  },\n  onTabContainerLayout: function onTabContainerLayout(e) {\n    this._tabContainerMeasurements = e.nativeEvent.layout;\n    var width = this._tabContainerMeasurements.width;\n\n    if (width < WINDOW_WIDTH) {\n      width = WINDOW_WIDTH;\n    }\n\n    this.setState({\n      _containerWidth: width\n    });\n    this.updateView({\n      value: this.props.scrollValue._value\n    });\n  },\n  onContainerLayout: function onContainerLayout(e) {\n    this._containerMeasurements = e.nativeEvent.layout;\n    this.updateView({\n      value: this.props.scrollValue._value\n    });\n  }\n});\nvar StyledTab = (0, _nativeBaseShoutemTheme.connectStyle)(\"NativeBase.ScrollableTab\", {}, mapPropsToStyleNames)(ScrollableTabBar);\nexports.ScrollableTab = StyledTab;\nvar styles = StyleSheet.create({\n  tab: {\n    height: 49,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingLeft: 20,\n    paddingRight: 20\n  },\n  container: {\n    height: 50,\n    borderWidth: 1,\n    borderTopWidth: 0,\n    borderLeftWidth: 0,\n    borderRightWidth: 0,\n    borderColor: \"#ccc\"\n  },\n  tabs: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\"\n  }\n});","map":{"version":3,"sources":["../../../../src/basic/Tabs/ScrollableTabBar.js"],"names":["React","require","View","Animated","StyleSheet","ScrollView","Platform","Dimensions","ViewPropTypes","ReactNative","Button","WINDOW_WIDTH","ScrollableTabBar","propTypes","goToPage","activeTab","tabs","backgroundColor","activeTextColor","inactiveTextColor","scrollOffset","style","tabStyle","tabsContainerStyle","renderTab","underlineStyle","onScroll","contextTypes","theme","getDefaultProps","getInitialState","_leftTabUnderline","_widthTabUnderline","_containerWidth","componentDidMount","updateView","position","Math","offset","pageOffset","tabCount","lastTabPosition","necessarilyMeasurementsCompleted","isLastTab","updateTabPanel","containerWidth","tabWidth","nextTabMeasurements","nextTabWidth","tabOffset","absolutePageOffset","newScrollX","x","y","animated","rightBoundScroll","updateTabUnderline","lineLeft","lineRight","nextTabLeft","nextTabRight","newLineLeft","newLineRight","headerContent","name","textColor","isTabActive","fontWeight","onPressHandler","measureTab","width","height","event","left","right","value","render","variables","tabUnderlineStyle","bottom","dynamicTabUnderline","styles","componentWillReceiveProps","nextProps","onTabContainerLayout","e","onContainerLayout","StyledTab","ScrollableTab","tab","alignItems","justifyContent","paddingLeft","paddingRight","container","borderWidth","borderTopWidth","borderLeftWidth","borderRightWidth","borderColor","flexDirection"],"mappings":"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","sourcesContent":["const React = require(\"react\");\nconst ReactNative = require(\"react-native\");\nimport { connectStyle, StyleProvider } from \"native-base-shoutem-theme\";\nimport variable from \"./../../theme/variables/platform\";\nimport { TabHeading, Text, TabContainer } from \"./../../index\";\nimport _ from \"lodash\";\nconst {\n  View,\n  Animated,\n  StyleSheet,\n  ScrollView,\n  Platform,\n  Dimensions,\n  ViewPropTypes\n} = ReactNative;\nconst Button = require(\"./Button\");\n\nconst WINDOW_WIDTH = Dimensions.get(\"window\").width;\n\nconst ScrollableTabBar = React.createClass({\n  propTypes: {\n    goToPage: React.PropTypes.func,\n    activeTab: React.PropTypes.number,\n    tabs: React.PropTypes.array,\n    backgroundColor: React.PropTypes.string,\n    activeTextColor: React.PropTypes.string,\n    inactiveTextColor: React.PropTypes.string,\n    scrollOffset: React.PropTypes.number,\n    style: ViewPropTypes.style,\n    tabStyle: ViewPropTypes.style,\n    tabsContainerStyle: ViewPropTypes.style,\n    renderTab: React.PropTypes.func,\n    underlineStyle: ViewPropTypes.style,\n    onScroll: React.PropTypes.func\n  },\n  contextTypes: {\n    theme: React.PropTypes.object\n  },\n\n  getDefaultProps() {\n    return {\n      scrollOffset: 52,\n      activeTextColor: \"navy\",\n      inactiveTextColor: \"black\",\n      backgroundColor: null,\n      style: {},\n      tabStyle: {},\n      tabsContainerStyle: {},\n      underlineStyle: {}\n    };\n  },\n\n  getInitialState() {\n    this._tabsMeasurements = [];\n    return {\n      _leftTabUnderline: new Animated.Value(0),\n      _widthTabUnderline: new Animated.Value(0),\n      _containerWidth: null\n    };\n  },\n\n  componentDidMount() {\n    this.props.scrollValue.addListener(this.updateView);\n  },\n\n  updateView(offset) {\n    const position = Math.floor(offset.value);\n    const pageOffset = offset.value % 1;\n    const tabCount = this.props.tabs.length;\n    const lastTabPosition = tabCount - 1;\n\n    if (tabCount === 0 || offset.value < 0 || offset.value > lastTabPosition) {\n      return;\n    }\n\n    if (\n      this.necessarilyMeasurementsCompleted(\n        position,\n        position === lastTabPosition\n      )\n    ) {\n      this.updateTabPanel(position, pageOffset);\n      this.updateTabUnderline(position, pageOffset, tabCount);\n    }\n  },\n\n  necessarilyMeasurementsCompleted(position, isLastTab) {\n    return (\n      this._tabsMeasurements[position] &&\n      (isLastTab || this._tabsMeasurements[position + 1]) &&\n      this._tabContainerMeasurements &&\n      this._containerMeasurements\n    );\n  },\n\n  updateTabPanel(position, pageOffset) {\n    const containerWidth = this._containerMeasurements.width;\n    const tabWidth = this._tabsMeasurements[position].width;\n    const nextTabMeasurements = this._tabsMeasurements[position + 1];\n    const nextTabWidth =\n      (nextTabMeasurements && nextTabMeasurements.width) || 0;\n    const tabOffset = this._tabsMeasurements[position].left;\n    const absolutePageOffset = pageOffset * tabWidth;\n    let newScrollX = tabOffset + absolutePageOffset;\n\n    // center tab and smooth tab change (for when tabWidth changes a lot between two tabs)\n    newScrollX -=\n      (containerWidth -\n        (1 - pageOffset) * tabWidth -\n        pageOffset * nextTabWidth) /\n      2;\n    newScrollX = newScrollX >= 0 ? newScrollX : 0;\n\n    if (Platform.OS === \"android\") {\n      this._scrollView.scrollTo({ x: newScrollX, y: 0, animated: false });\n    } else {\n      const rightBoundScroll =\n        this._tabContainerMeasurements.width -\n        this._containerMeasurements.width;\n      newScrollX = newScrollX > rightBoundScroll\n        ? rightBoundScroll\n        : newScrollX;\n      this._scrollView.scrollTo({ x: newScrollX, y: 0, animated: false });\n    }\n  },\n\n  updateTabUnderline(position, pageOffset, tabCount) {\n    const lineLeft = this._tabsMeasurements[position].left;\n    const lineRight = this._tabsMeasurements[position].right;\n\n    if (position < tabCount - 1) {\n      const nextTabLeft = this._tabsMeasurements[position + 1].left;\n      const nextTabRight = this._tabsMeasurements[position + 1].right;\n\n      const newLineLeft =\n        pageOffset * nextTabLeft + (1 - pageOffset) * lineLeft;\n      const newLineRight =\n        pageOffset * nextTabRight + (1 - pageOffset) * lineRight;\n\n      this.state._leftTabUnderline.setValue(newLineLeft);\n      this.state._widthTabUnderline.setValue(newLineRight - newLineLeft);\n    } else {\n      this.state._leftTabUnderline.setValue(lineLeft);\n      this.state._widthTabUnderline.setValue(lineRight - lineLeft);\n    }\n  },\n\n  renderTab(\n    name,\n    page,\n    isTabActive,\n    onPressHandler,\n    onLayoutHandler,\n    tabStyle,\n    activeTabStyle,\n    textStyle,\n    activeTextStyle,\n    tabHeaderStyle\n  ) {\n    const headerContent = typeof name !== \"string\"\n      ? name.props.children\n      : undefined;\n    const { activeTextColor, inactiveTextColor } = this.props;\n    const textColor = isTabActive ? activeTextColor : inactiveTextColor;\n    const fontWeight = isTabActive ? \"bold\" : \"normal\";\n\n    if (typeof name === \"string\") {\n      return (\n        <Button\n          key={`${name}_${page}`}\n          onPress={() => onPressHandler(page)}\n          onLayout={onLayoutHandler}\n        >\n          <TabHeading\n            scrollable\n            style={isTabActive ? activeTabStyle : tabStyle}\n            active={isTabActive}\n          >\n            <Text style={isTabActive ? activeTextStyle : textStyle}>\n              {name}\n            </Text>\n          </TabHeading>\n        </Button>\n      );\n    } else {\n      return (\n        <Button key={_.random(1.2, 5.2)} onPress={() => onPressHandler(page)}>\n          <TabHeading scrollable style={tabHeaderStyle} active={isTabActive}>\n            {headerContent}\n          </TabHeading>\n        </Button>\n      );\n    }\n  },\n\n  measureTab(page, event) {\n    const { x, width, height } = event.nativeEvent.layout;\n    this._tabsMeasurements[page] = { left: x, right: x + width, width, height };\n    this.updateView({ value: this.props.scrollValue._value });\n  },\n\n  render() {\n    const variables = this.context.theme\n      ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables\n      : variable;\n    const tabUnderlineStyle = {\n      position: \"absolute\",\n      height: 4,\n      backgroundColor: variables.topTabBarActiveBorderColor,\n      bottom: 0\n    };\n\n    const dynamicTabUnderline = {\n      left: this.state._leftTabUnderline,\n      width: this.state._widthTabUnderline\n    };\n\n    return (\n      <View\n        style={[\n          styles.container,\n          { backgroundColor: this.props.backgroundColor },\n          this.props.style\n        ]}\n        onLayout={this.onContainerLayout}\n      >\n        <ScrollView\n          automaticallyAdjustContentInsets={false}\n          ref={scrollView => {\n            this._scrollView = scrollView;\n          }}\n          horizontal={true}\n          showsHorizontalScrollIndicator={false}\n          showsVerticalScrollIndicator={false}\n          directionalLockEnabled={true}\n          onScroll={this.props.onScroll}\n          bounces={false}\n          scrollsToTop={false}\n        >\n          <View\n            style={[\n              styles.tabs,\n              { width: this.state._containerWidth },\n              this.props.tabsContainerStyle\n            ]}\n            ref={\"tabContainer\"}\n            onLayout={this.onTabContainerLayout}\n          >\n            {this.props.tabs.map((name, page) => {\n              const isTabActive = this.props.activeTab === page;\n              const renderTab = this.props.renderTab || this.renderTab;\n              return renderTab(\n                name,\n                page,\n                isTabActive,\n                this.props.goToPage,\n                this.measureTab.bind(this, page),\n                this.props.tabStyle[page],\n                this.props.activeTabStyle[page],\n                this.props.textStyle[page],\n                this.props.activeTextStyle[page],\n                this.props.tabHeaderStyle[page]\n              );\n            })}\n            <Animated.View\n              style={[\n                tabUnderlineStyle,\n                dynamicTabUnderline,\n                this.props.underlineStyle\n              ]}\n            />\n          </View>\n        </ScrollView>\n      </View>\n    );\n  },\n\n  componentWillReceiveProps(nextProps) {\n    // If the tabs change, force the width of the tabs container to be recalculated\n    if (\n      !_.isEqual(this.props.tabs, nextProps.tabs) &&\n      this.state._containerWidth\n    ) {\n      this.setState({ _containerWidth: null });\n    }\n  },\n\n  onTabContainerLayout(e) {\n    this._tabContainerMeasurements = e.nativeEvent.layout;\n    let width = this._tabContainerMeasurements.width;\n    if (width < WINDOW_WIDTH) {\n      width = WINDOW_WIDTH;\n    }\n    this.setState({ _containerWidth: width });\n    this.updateView({ value: this.props.scrollValue._value });\n  },\n\n  onContainerLayout(e) {\n    this._containerMeasurements = e.nativeEvent.layout;\n    this.updateView({ value: this.props.scrollValue._value });\n  }\n});\n\n// module.exports = ScrollableTabBar;\nconst StyledTab = connectStyle(\n  \"NativeBase.ScrollableTab\",\n  {},\n  mapPropsToStyleNames\n)(ScrollableTabBar);\nexport { StyledTab as ScrollableTab };\nconst styles = StyleSheet.create({\n  tab: {\n    height: 49,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    paddingLeft: 20,\n    paddingRight: 20\n  },\n  container: {\n    height: 50,\n    borderWidth: 1,\n    borderTopWidth: 0,\n    borderLeftWidth: 0,\n    borderRightWidth: 0,\n    borderColor: \"#ccc\"\n  },\n  tabs: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\"\n  }\n});\n"]},"metadata":{},"sourceType":"script"}