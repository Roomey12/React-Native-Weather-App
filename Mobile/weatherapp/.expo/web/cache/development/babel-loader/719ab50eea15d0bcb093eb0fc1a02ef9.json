{"ast":null,"code":"import _ from 'lodash';\n\nfunction isStyleVariant(propertyName) {\n  return /^\\./.test(propertyName);\n}\n\nfunction isChildStyle(propertyName) {\n  return /(^[^\\.].*\\.)|^\\*$/.test(propertyName);\n}\n\nfunction splitStyle(style) {\n  return _.reduce(style, function (result, value, key) {\n    var styleSection = result.componentStyle;\n\n    if (isStyleVariant(key)) {\n      styleSection = result.styleVariants;\n    } else if (isChildStyle(key)) {\n      styleSection = result.childrenStyle;\n    }\n\n    styleSection[key] = value;\n    return result;\n  }, {\n    componentStyle: {},\n    styleVariants: {},\n    childrenStyle: {}\n  });\n}\n\nfunction customMerge(obj1, obj2) {\n  var objToReturn = {};\n  var property1, property2;\n\n  if (!obj1) {\n    return obj2;\n  } else if (!obj2) {\n    return obj1;\n  }\n\n  for (property1 in obj1) {\n    for (property2 in obj2) {\n      if (property1 === property2) {\n        if (typeof obj1[property1] !== 'object' || typeof obj2[property1] !== 'object' || !obj2[property1] || !obj1[property1]) {\n          objToReturn[property1] = obj2[property1];\n        } else {\n          objToReturn[property1] = customMerge(obj1[property1], obj2[property1]);\n        }\n      } else {\n        if (objToReturn[property1] === undefined) objToReturn[property1] = obj1[property1];\n        if (objToReturn[property2] === undefined) objToReturn[property2] = obj2[property2];\n      }\n    }\n  }\n\n  return objToReturn;\n}\n\nexport function resolveComponentStyle(componentName) {\n  var styleNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var themeStyle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var parentStyle = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var themeCache = arguments.length > 4 ? arguments[4] : undefined;\n  var mergedStyle = customMerge(themeStyle, parentStyle[componentName]);\n  styleNames.forEach(function (sn, index) {\n    mergedStyle = customMerge(mergedStyle, themeStyle[\"\" + sn]);\n  });\n  styleNames.forEach(function (sn, index) {\n    mergedStyle = customMerge(mergedStyle, parentStyle[\"\" + componentName + sn]);\n  });\n  var resolvedStyle = customMerge(mergedStyle, parentStyle[componentName]);\n  styleNames.forEach(function (sn, index) {\n    resolvedStyle = customMerge(resolvedStyle, mergedStyle[\"\" + sn]);\n  });\n  styleNames.forEach(function (sn, index) {\n    resolvedStyle = customMerge(resolvedStyle, parentStyle[\"\" + componentName + sn]);\n  });\n  return resolvedStyle;\n}","map":{"version":3,"sources":["C:/Users/roomey/Desktop/react-native/weatherapp/node_modules/native-base-shoutem-theme/src/resolveComponentStyle.js"],"names":["_","isStyleVariant","propertyName","test","isChildStyle","splitStyle","style","reduce","result","value","key","styleSection","componentStyle","styleVariants","childrenStyle","customMerge","obj1","obj2","objToReturn","property1","property2","undefined","resolveComponentStyle","componentName","styleNames","themeStyle","parentStyle","themeCache","mergedStyle","forEach","sn","index","resolvedStyle"],"mappings":"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","sourcesContent":["import _ from 'lodash';\n\n/**\n * Matches any style properties that represent component style variants.\n * Those styles can be applied to the component by using the styleName\n * prop. All style variant property names must start with a single '.'\n * character, e.g., '.variant'.\n *\n * @param propertyName The style property name.\n * @returns {boolean} True if the style property represents a component variant, false otherwise.\n */\nfunction isStyleVariant(propertyName) {\n  return /^\\./.test(propertyName);\n}\n\n/**\n * Matches any style properties that represent style rules that target the\n * component children. Those styles can have two formats, they can either\n * target the components by component name ('shoutem.ui.Text'), or by component\n * name and variant ('shoutem.ui.Text.line-through'). Beside specifying the\n * component name, those styles can also target any component by using the\n * '*' wildcard ('*', or '*.line-through'). The rule to identify those styles is\n * that they have to contain a '.' character in their name or be a '*'.\n *\n * @param propertyName The style property name.\n * @returns {boolean} True if the style property represents a child style, false otherwise.\n */\nfunction isChildStyle(propertyName) {\n  return /(^[^\\.].*\\.)|^\\*$/.test(propertyName);\n}\n\n/**\n * Splits the style into its parts:\n * component style - concrete style that needs to be applied to a component\n * style variants - variants that can be applied to a component by using styleName prop\n * children style - style rules that need to be propagated to component children\n *\n * @param style The style to split.\n * @returns {*} An object with the componentStyle, styleVariants, and childrenStyle keys.\n */\nfunction splitStyle(style) {\n  return _.reduce(style, (result, value, key) => {\n    let styleSection = result.componentStyle;\n    if (isStyleVariant(key)) {\n      styleSection = result.styleVariants;\n    } else if (isChildStyle(key)) {\n      styleSection = result.childrenStyle;\n    }\n    styleSection[key] = value;\n    return result;\n  }, {\n    componentStyle: {},\n    styleVariants: {},\n    childrenStyle: {},\n  });\n}\n\nfunction customMerge(obj1, obj2) {\n  const objToReturn = {};\n\n  let property1, property2;\n\n  if(!obj1) {\n    return obj2;\n  } else if(!obj2) {\n    return obj1;\n  }\n\n  for(property1 in obj1) {\n    for(property2 in obj2) {\n      if(property1 === property2) {\n        if(typeof obj1[property1] !== 'object' || typeof obj2[property1] !== 'object' || !obj2[property1] || !obj1[property1]) {\n          objToReturn[property1] = obj2[property1];\n        } else {\n          objToReturn[property1] = customMerge(obj1[property1], obj2[property1]);\n        }\n      } else {\n        if(objToReturn[property1] === undefined)\n          objToReturn[property1] = obj1[property1];\n        if(objToReturn[property2] === undefined)\n          objToReturn[property2] = obj2[property2];\n      }\n    }\n  }\n\n  return objToReturn;\n}\n\n/**\n * Resolves the final component style by merging all of the styles that can be\n * applied to a component in the proper order.\n *\n * This function extracts the applicable parts of the theme, parent and element\n * styles, and merges the styles that target the component, and component variants\n * with those styles to get the final style.\n *\n * The styles are merged in the following order, where the styles with the\n * higher index override the styles with the lower one:\n * 1. Theme component style\n * 2. Parent component style\n * 3. Theme style variants specified through styleName\n * 4. Parent style variants specified through styleName\n * 5. Element style passed through the style prop\n *\n * @param componentName The component name ('shoutem.ui.Text')\n * @param styleName Style names ('large rounded')\n * @param themeStyle The theme style that should include the theme and base component style\n * @param parentStyle The style rules inherited from the parent component\n * @param elementStyle The style passed through the style prop of the component\n * @returns {{componentStyle, childrenStyle}} The resolved component and children styles.\n */\nexport function resolveComponentStyle(\n  componentName,\n  styleNames = [],\n  themeStyle = {},\n  parentStyle = {},\n  themeCache\n) {\n\n  // const mergedStyle = _.merge({},\n  //   themeStyle,\n  //   parentStyle['*'],\n  //   parentStyle[componentName],\n  //   ..._.map(styleNames, (sn) => themeStyle[`.${sn}`]),\n  //   ..._.map(styleNames, (sn) => parentStyle[`*.${sn}`]),\n  //   ..._.map(styleNames, (sn) => parentStyle[`${componentName}.${sn}`])\n  // );\n\n  \n\n  let mergedStyle = customMerge(themeStyle, parentStyle[componentName]);\n  styleNames.forEach((sn, index) => {\n    mergedStyle = customMerge(mergedStyle, themeStyle[`${sn}`]);\n  });\n\n  styleNames.forEach((sn, index) => {\n    mergedStyle = customMerge(mergedStyle, parentStyle[`${componentName}${sn}`])\n  });\n\n  // Phase 2: merge the component styles, this step is performed by using the\n  // style from phase 1, so that we are sure that the final style variants are\n  // applied to component style.\n  // const resolvedStyle = _.merge({},\n  //   mergedStyle,\n  //   parentStyle['*'],\n  //   parentStyle[componentName],\n  //   ..._.map(styleNames, (sn) => mergedStyle[`.${sn}`]),\n  //   ..._.map(styleNames, (sn) => parentStyle[`*.${sn}`]),\n  //   ..._.map(styleNames, (sn) => parentStyle[`${componentName}.${sn}`])\n  // );\n\n  let resolvedStyle = customMerge(mergedStyle, parentStyle[componentName]);\n  \n  styleNames.forEach((sn, index) => {\n    resolvedStyle = customMerge(resolvedStyle, mergedStyle[`${sn}`])\n  });\n\n  styleNames.forEach((sn, index) => {\n    resolvedStyle = customMerge(resolvedStyle, parentStyle[`${componentName}${sn}`])\n  });\n\n  return resolvedStyle;\n}\n"]},"metadata":{},"sourceType":"module"}